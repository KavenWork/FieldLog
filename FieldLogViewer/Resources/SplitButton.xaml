<ResourceDictionary
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:ui="clr-namespace:Unclassified.UI">

	<Style x:Key="DummyToggleButton" TargetType="{x:Type ToggleButton}">
		<Setter Property="Background" Value="Transparent"/>
		<Setter Property="FocusVisualStyle" Value="{x:Null}"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ToggleButton}">
					<Border Background="{TemplateBinding Background}"/>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="SplitButtonFocusVisualStyle" TargetType="{x:Type IFrameworkInputElement}">
		<Setter Property="Control.Template">
			<Setter.Value>
				<ControlTemplate>
					<Rectangle
						Margin="3,3,3,3"
						SnapsToDevicePixels="True"
						Stroke="#FF000000"
						StrokeDashArray="1 2"
						StrokeThickness="1"/>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="ExpanderStyle" TargetType="{x:Type ToggleButton}">
		<Setter Property="Focusable" Value="False"/>
		<Setter Property="IsChecked" Value="False"/>
		<Setter Property="ClickMode" Value="Press"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ToggleButton}">
					<Grid Background="{TemplateBinding Background}">
						<Grid HorizontalAlignment="Center" VerticalAlignment="Center">
							<Polygon x:Name="Polygon" Fill="Black" Points="0,0 6,0 3,4"/>
						</Grid>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsChecked" Value="True">
							<Setter Property="Points" TargetName="Polygon" Value="0,4 6,4 3,0"/><!-- TODO: Unused? -->
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="HeaderButtonStyle" TargetType="{x:Type Button}">
		<Setter Property="OverridesDefaultStyle" Value="True"/>
		<Setter Property="FocusVisualStyle" Value="{x:Null}"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Button}">
					<Grid
						Background="{TemplateBinding Background}">
						<Grid.ColumnDefinitions>
							<ColumnDefinition MinWidth="14" Width="Auto"/>
							<ColumnDefinition/>
						</Grid.ColumnDefinitions>
						<ContentPresenter
							ContentSource="Icon"
							Margin="2,0,2,0"
							Name="PART_IconSite"
							VerticalAlignment="Center"
							SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
							Content="{Binding Path=Icon, RelativeSource={RelativeSource AncestorType={x:Type ui:SplitButton}}, Mode=TwoWay}"
							Grid.Column="0"/>
						<Border Background="Transparent">
							<ContentPresenter
								Name="PART_ContentSite"
								Margin="{TemplateBinding Control.Padding}"
								HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
								VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
								SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
								ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}"
								RecognizesAccessKey="True"
								Content="{TemplateBinding ContentControl.Content}"
								Grid.Column="1"/>
						</Border>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="Content" SourceName="PART_IconSite" Value="{x:Null}">
							<Setter Property="Visibility" TargetName="PART_IconSite" Value="Collapsed"/>
							<Setter Property="Grid.Column" TargetName="PART_ContentSite" Value="0"/>
							<Setter Property="Grid.ColumnSpan" TargetName="PART_ContentSite" Value="2"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style TargetType="{x:Type ui:SplitButton}">
		<Setter Property="Focusable" Value="True"/>
		<Setter Property="FocusVisualStyle" Value="{StaticResource SplitButtonFocusVisualStyle}"/>
		<Setter Property="FontFamily" Value="{DynamicResource {x:Static SystemFonts.MessageFontFamilyKey}}"/>
		<Setter Property="FontSize" Value="{DynamicResource {x:Static SystemFonts.MessageFontSizeKey}}"/>
		<Setter Property="FontStyle" Value="{DynamicResource {x:Static SystemFonts.MessageFontStyleKey}}"/>
		<Setter Property="FontWeight" Value="{DynamicResource {x:Static SystemFonts.MessageFontWeightKey}}"/>
		<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
		<Setter Property="CornerRadius" Value="0"/>
		<Setter Property="Padding" Value="4"/>
		<Setter Property="BorderThickness" Value="1"/>
		<Setter Property="BorderBrush" Value="Transparent"/>
		<!--Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/-->
		<Setter Property="Background" Value="Transparent"/>
		<Setter Property="MinHeight" Value="{DynamicResource {x:Static SystemParameters.MenuButtonHeightKey}}"/>
		<Setter Property="SnapsToDevicePixels" Value="True"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ui:SplitButton}">
					<Grid>
						<Border
							BorderThickness="{TemplateBinding BorderThickness}"
							BorderBrush="{TemplateBinding BorderBrush}"
							CornerRadius="{TemplateBinding CornerRadius}"
							Background="{TemplateBinding Background}"
							SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
							<Grid>
								<Grid.ColumnDefinitions>
									<ColumnDefinition Width="*"/>
									<ColumnDefinition Width="1"/>
									<ColumnDefinition Width="12"/>
									<!--ColumnDefinition
										MaxWidth="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarButtonWidthKey}}"
										MinWidth="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarButtonWidthKey}}"/-->
								</Grid.ColumnDefinitions>
								<Button
									Name="PART_Button"
									Focusable="False"
									Style="{StaticResource HeaderButtonStyle}"
									Background="Transparent"
									Padding="{TemplateBinding Control.Padding}"
									SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
									ContentTemplate="{TemplateBinding HeaderTemplate}"
									ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}"
									Content="{TemplateBinding Header}"
									Grid.Column="0"/>
								<Rectangle Fill="{TemplateBinding BorderBrush}" Grid.Column="1" Visibility="Hidden" Name="separator"/>
								<ToggleButton
									Grid.Column="2"
									Focusable="False"
									Name="PART_DropDownButton"
									Background="Transparent"
									Style="{StaticResource ExpanderStyle}"/>
								<ToggleButton
									Name="DummyDropDownButton"
									Style="{StaticResource DummyToggleButton}"
									ClickMode="Press"
									Grid.Column="2"
									Focusable="False"
									IsChecked="{Binding Path=IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}"/>
							</Grid>
						</Border>
						<Popup
							Name="PART_Popup"
							Placement="Bottom"
							IsOpen="{Binding Path=IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}"
							AllowsTransparency="True"
							Focusable="False"
							PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
							<Grid Name="PopupGrid">
								<!-- The shadow doesn't reach to the very top and left of the popup, so apply it on a slightly smaller Border -->
								<Border Name="ShadowBorder" Margin="3,3,0,0" Background="Black"/>
								<Border
									BorderThickness="1"
									BorderBrush="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"
									Background="{DynamicResource {x:Static SystemColors.MenuBrushKey}}"
									Padding="2"
									UseLayoutRounding="True">
									<Grid>
										<Border
											HorizontalAlignment="Left" Width="29"
											Background="#04000000"
											BorderThickness="0,0,1,0" BorderBrush="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}"/>
										<Border
											HorizontalAlignment="Left" Margin="29,0,0,0"
											BorderThickness="0,0,1,0" BorderBrush="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}"/>
										<ItemsPresenter
											KeyboardNavigation.DirectionalNavigation="Cycle"
											KeyboardNavigation.TabNavigation="Cycle"
											SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
									</Grid>
								</Border>
							</Grid>
						</Popup>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter Property="Visibility" TargetName="separator" Value="Visible"/>
							<Setter Property="BorderBrush" Value="#A4CEF9"/>
							<Setter Property="Background" Value="#E8EFF7"/>
						</Trigger>
						<Trigger Property="IsPressed" SourceName="PART_Button" Value="True">
							<Setter Property="BorderBrush" Value="#62A2E4"/>
							<Setter Property="Background" TargetName="PART_Button" Value="#C9E0F7"/>
						</Trigger>
						<Trigger Property="IsPressed" SourceName="DummyDropDownButton" Value="True">
							<Setter Property="BorderBrush" Value="#62A2E4"/>
							<Setter Property="Background" TargetName="PART_DropDownButton" Value="#C9E0F7"/>
						</Trigger>
						<Trigger Property="IsChecked" SourceName="DummyDropDownButton" Value="True">
							<Setter Property="BorderBrush" Value="#62A2E4"/>
							<Setter Property="Background" TargetName="PART_DropDownButton" Value="#C9E0F7"/>
						</Trigger>
						<Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="True">
							<Setter Property="Margin" TargetName="PopupGrid" Value="0,0,8,8"/>
							<Setter Property="Effect" TargetName="ShadowBorder">
								<Setter.Value>
									<DropShadowEffect BlurRadius="4" Color="Black" Direction="315" Opacity="0.6" ShadowDepth="2"/>
								</Setter.Value>
							</Setter>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
</ResourceDictionary>
